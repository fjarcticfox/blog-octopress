<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：objective-c | 逆水行舟]]></title>
  <link href="http://blog.longgen.me/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://blog.longgen.me/"/>
  <updated>2014-10-13T12:39:17+08:00</updated>
  <id>http://blog.longgen.me/</id>
  <author>
    <name><![CDATA[Longgen]]></name>
    <email><![CDATA[fjarcticfox@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C 学习]]></title>
    <link href="http://blog.longgen.me/blog/2014/03/23/objective-c-xue-xi/"/>
    <updated>2014-03-23T17:01:01+08:00</updated>
    <id>http://blog.longgen.me/blog/2014/03/23/objective-c-xue-xi</id>
    <content type="html"><![CDATA[<h1>1 简介</h1>

<h2>1.1 预备知识</h2>

<ul>
<li>具备 C 类似编程语言的经验，对于不具备语言基础的，可以先阅读 Dava Mark 写的《Learn C On the Mac》
。</li>
</ul>


<h2>1.2 历史背景</h2>

<ul>
<li>20世纪80年代早期，Brad Cox 结合 C 语言及 Smalltakl 语言形成了 Objective-C。</li>
</ul>


<h2>1.3 内容简介</h2>

<p>Objective-C 是 C 语言的一个扩展集。Objective-C 以 C 语言为基础，扩展了许多特性。</p>

<!-- more -->


<h1>2 对 C 的扩展</h1>

<h2>2.1 Hello World</h2>

<ul>
<li><p>安装 Xcode</p></li>
<li><p>编写代码</p></li>
</ul>


<p>```objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>int main (int argc, const char *argv[])
{</p>

<pre><code>NSlog(@"Hello, world!");

return (0);
</code></pre>

<p>}   // main</p>

<p>```</p>

<ul>
<li>.m 扩展名表示 Objective-C 文件，应由 Objective-C 编译器处理；.c 由 C编译器处理；.cpp 由 C++ 编译器处理。在 Xcode 中，所有这些编译工作全由 GCC（GNU Compiler Collection，GNU编译器集合）处理，这个编译器能理解 C 语言的这三个变体</li>
</ul>


<h3>2.2.1 #import</h3>

<p>C 语言中使用 #include 语句通知编译器在头文件中查询定义；Objective-C 中也可以使用 #include 来实现这个目的，但一般只使用 #import。#import 保证头文件只被包含一次</p>

<blockquote><p>C 语言中，长用基于 #ifdef 命令的方案来避免一个文件包含另一个文件，而后者又包含第一个文件的情况；Objective-C 中，使用 #import 可以实现这个功能。</p></blockquote>

<p>框架是一种聚集在一个单元的部件集合，包含头文件、库、图像、声音文件等。苹果公司提供 Cocoa（Cocoa 包含 Foundation 和 Application Kit（也称为 AppKit））、Carbon、QuickTime、OpenGL 等技术框架。还有一个支持框架的套件，包含 Core Animation 和 Core Image。</p>

<ul>
<li>Foundation 框架包含的头文件 Headers 目录位置：/System/Library/Frameworks/Foundation.framework/Headers/ 。仅查看，不修改或删除以避免造成破坏。</li>
</ul>


<blockquote><p>学完本书后，还需要精通 Cocoa 和 Application Kit，用户界面元素、打印、声音、颜色和声音管理、AppleScript 支持等。参阅《Learn Cocoa on the Mac》。</p></blockquote>

<h3>2.2.2 NSLog() 和 @“字符串"</h3>

<ul>
<li><p>类似 C 语言的 printf()，相对添加了新特性，例如时间戳、日期戳和自动附加换行符（'\n'）等。</p></li>
<li><p>NS 前缀代表函数来自Cocoa（前身NextSTEP）。</p></li>
<li><p>双引号字符串前加 @ 符号，表示引用的字符串应该作为 Cocoa 的 NSString 元素来处理</p></li>
</ul>


<h2>2.3 布尔类型</h2>

<p>类型 BOOL，值 YES 或 NO。</p>

<blockquote><p>Objective-C 中的 BOOL 实际上是一种对带符号的字符类型（signed char）的定义（typedef），它使用8位存储空间。YES 定义为1，NO 定义为0（使用 #define）。Objective-C 并不将 BOOL 作为仅能保存 YES 或 NO 值得真正布尔类型来处理。编译器将 BOOL 认作8位二进制数，YES 和 NO 只是一种约定。这引发了一个小问题：如果不小心将一个长于1字节的整型值（例如 short 或 int 值）赋给一个 BOOL 变量，那么只有低位字节会用作 BOOL 值。假设该低位字节刚好为0（例如8960，写成十六进制为0x2300），BOOL 值将会是0，即 NO 值。</p></blockquote>

<h1>3 面向对象编程基础知识</h1>

<p>面向对象编程（Object-Oriented Programming，OOP）。Cocoa 基于 OOP 概念，Objective-C 是一种面向对象语言</p>

<h2>3.1 间接（indirection）</h2>

<h3>3.1.1 变量与间接</h3>

<p>```objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>int main(int argc, const char * argv[])
{</p>

<pre><code>int count = 5;

NSLog(@"The numbers from 1 to %d:", count);

int i;

for (i = 1; i &lt;= count; i++) {
    NSLog(@"%d\n", i);
}
return (0);
</code></pre>

<p>}   // main</p>

<p>```</p>

<h3>3.1.2 使用文件名的间接</h3>

<p>```objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>int main(int argc, const char * argv[])
{</p>

<pre><code>if (argc == 1) {
    NSLog(@"You need to provide a file name!");
    return (1);
}

FILE *wordFile = fopen(argv[1], "r");
char word[100];

while (fgets(word, 100, wordFile)) {
    // strip off the trailing \n
    word[strlen[word] - 1] = '\0';

    NSLog(@"%s is %d characters long", word, strlen(word));
}

fclose(wordFile);

return (0);
</code></pre>

<p>}   // main</p>

<p>```</p>

<blockquote><p>在 Xcode 中提供文件路径：在 Xcode 文件列表中展开 Executables，并双击程序名；单击 Arguments 区域下的加号，并输入启动参数。</p></blockquote>

<h2>3.2 在面向对象的编程中使用间接</h2>

<h1>4 继承</h1>

<h2>4.1 为何使用继承</h2>

<h2>4.2 继承语法</h2>

<p>```objective-c</p>

<p>@interface Circle : NSObject</p>

<p>```</p>

<blockquote><p>某些语言（例如 C++）具有多继承特性。但 Objective-C 不支持多继承。你可以通过 Objective-C 的其他特性获取多继承的优点，例如分类或协议</p></blockquote>

<h2>4.3 继承的工作机制</h2>

<h3>4.3.1 方法调度</h3>

<p>对象收到消息时，它从自身开始往其继承链上的超类层层往上查找对应方法，并执行。若在最高级别的超类（NSObject）中也没有该方法，则会出现运行时错误。</p>

<h3>4.3.2 实例变量</h3>

<h2>4.4 重写方法</h2>

<h1>5 复合</h1>

<h2>5.1 什么是复合</h2>

<h2>5.2 存取方法</h2>

<p>为存取方法命名：setter 方法需加前缀 set；getter 方法则仅仅根据其返回的属性名称来命名，不要将get作为前缀</p>

<blockquote><p>get 这个词在 Cocoa 中有特殊约定含义：get 出现在 Cocoa 的方法名称中，意味着这个方法会通过你当做参数传入的指针来返回数值。例如，NSData的getBytes方法。</p></blockquote>

<h2>5.3 复合（has a）与继承（is a）的选择</h2>

<h1>6 源文件组织</h1>

<p>Objective-C 类的源码分为两部分：接口（interface），用来提供类的公共描述；实现（implementation），告诉编译器如何让该类工作，实现了接口中声明的方法。</p>

<ul>
<li><p>.h 文件存放接口部分代码：类的 @interface 指令、公共 struct 定义、enum 常量、#defines 和 extern 全局变量等。</p></li>
<li><p>.m 文件存放所有实现细节：类的 @implementation 指令、全局变量的定义、私有struct等</p></li>
</ul>


<blockquote><p>.mm 文件表示你用 Objective-C++ 编写代码的文件，可以使用 C++ 语言和 Objective-C 结合编程</p>

<p>@class 创建向前引用，避免循环依赖关系时，编译错误</p></blockquote>

<h1>7 深入了解 Xcode</h1>

<ul>
<li><p>通用常用快捷键</p>

<ul>
<li>control + A：      移动到行首（同 command + 左箭头）</li>
<li>control + E：      移动到行尾（同 command + 右箭头）</li>
<li>control + D：      删除（Delete）光标右边的字符</li>
<li>control + K：      删除（Kill）光标所在行中光标后的代码</li>
<li>control + L：      将插入点置于窗口正中。找不到光标或者想要移动窗口使插入点快速位于正中的快捷键</li>
</ul>
</li>
<li><p>Xcode 快捷键</p>

<ul>
<li>command + shift + D：          查找文件</li>
<li>command + option + 上箭头：     查看当前文件的配套文件</li>
<li>command + shift + E：          打开扩展编辑器</li>
<li>command + [：                  左移代码块</li>
<li>command + ]：                  右移代码块</li>
<li>Tab：                          接受代码提示</li>
<li>Esc：                          显示代码提示菜单</li>
<li>control + .：                  循环浏览代码提示</li>
<li>shift + control + .：          反向循环浏览代码提示</li>
<li>control + /：                  移动到代码提示中得下一个占位符</li>
<li>command + option + D：         显示 Open Quickly 窗口</li>
<li>command + option + 上箭头：     查看当前文件的配套文件</li>
<li>command + D：                  添加书签</li>
<li>option + 双击某个符号：          查找该符号相关文档</li>
<li>command + R：                  运行程序</li>
<li>command + Y：                  调试程序</li>
<li>command + option + P：         继续（在调试器中）</li>
<li>command + option + O：         跳过</li>
<li>command + option + I：         跳入</li>
<li>command + option + T：         跳出</li>
</ul>
</li>
</ul>


<blockquote><p>Xcode 使用的调试器是 GDB。GDB 是GNU项目的一部分，它可以在很多不同平台上使用。</p></blockquote>

<h1>8 Foundation Kit</h1>

<h2>8.1 数据类型</h2>

<h3>8.1.1 NSRange</h3>

<p>```objective-c</p>

<p>typedef struct _NSRange {</p>

<pre><code>unsigned int location;
unsigned int length;
</code></pre>

<p>} NSRange;</p>

<p>/<em> 聚合结构赋值 </em>/
NSRange range = {17, 4};</p>

<p>/<em> NSMakeRange()赋值 </em>/
NSRange r = NSMakeRange(17, 4);</p>

<p>```</p>

<h3>8.1.2 几何数据类型</h3>

<p>```objective-c</p>

<p>typedef struct _NSPoint {</p>

<pre><code>float x;
float y;
</code></pre>

<p>} NSPoint;</p>

<p>typedef struct _NSSize {</p>

<pre><code>float width;
float height;
</code></pre>

<p>} NSSize;</p>

<p>typedef struct _NSRect {</p>

<pre><code>NSPoint origin;
NSSize size;
</code></pre>

<p>} NSRect;</p>

<p>/<em> 创建这些数据类型的快捷函数：NSMakePoint()、NSMakeSize() 和 NSMakeRect() </em>/</p>

<p>```</p>

<blockquote><p>这些数据类型是 C 的 struct，能提升性能。程序（尤其是 GUI 程序）会用到许多临时的点，大小和句型来完成它们的工作。所有的 Objective-C 对象都是动态分配的，而动态分配是一个代价较高得操作，它会消耗大量的时间。所以将这些结构创建成第一等级的对象都会在使用过程中增加大量的系统开销。</p></blockquote>

<h2>8.2 不可变字符串 NSString</h2>

<ul>
<li><p>NSString 的 length 方法能够准确无误的处理国际字符串，如含有中文、俄文或日文字符的字符串，以及使用 Unicode 国际字符标准的字符串。</p></li>
<li><p>比较两个字符串内容是否相等时，应用 isEuqalToString:，而不能用 == 进行比较，后者仅进行指针（即是否是同一个对象）的比较。</p></li>
<li><p>NSString 是不可变的。它的子类 NSMutableString 是可变字符串。</p></li>
</ul>


<h2>8.4 集合家族</h2>

<h3>8.4.1 不可变数组 NSArray</h3>

<p>NSArray 是一个 Cocoa 类，用来存储对象的有序列表。它只能存储 Objective-C 对象，而不能存储 C 语言中的基本数据类型，如 int、float、enum、struct，或 NSArray 中的随机指针；同时，不能在 NSArray 中存储 nil（对象的零值或 NULL 值）。</p>

<h3>8.4.2 可变数组 NSMutableArray</h3>

<h3>8.4.3 枚举</h3>

<p>```objective-c
NSArray <em>array;
array = [NSArray arrayWithObjects: @&ldquo;one&rdquo;, @&ldquo;two&rdquo;, @&ldquo;three&rdquo;, nil];
NSEnumerator </em>enumerator;
enumerator = [array objectEnumerator];</p>

<p>id thingie;
while (thingie = [enumerator nextObject]) {</p>

<pre><code>NSLog(@"I found %@", thingie);
</code></pre>

<p>}</p>

<p>/<em> 可变数组枚举时，不能添加或身处对象等方式改变数组容器，否则可能会得到未定义结果 </em>/</p>

<p>```</p>

<h3>8.4.4 快速枚举</h3>

<p>```objective-c</p>

<p>/<em> Mac OS X 10.5（Leopard），Objective-C 2.0 版本之后，增加快速枚举 </em>/
for (NSString *string in array) {</p>

<pre><code>NSLog(@"I found %@", string);
</code></pre>

<p>}</p>

<p>```</p>

<h3>8.4.5 不可变字典 NSDictionary 与 可变字典 NSMutableDictionary</h3>

<blockquote><p>字典（也被称为散列表或关联数组）使用的是键查询的优化存储方式，它可以立即找出要查询的数据，而不需要遍历整个数组，比普通数组的查询方式更为快速</p></blockquote>

<h3>8.4.6 使用，但不要扩展</h3>

<p>在 Cocoa 中，许多类实际上是以 <em>类簇</em> 的方式实现的，即它们是隐藏在通用接口下的与实现相关的类。创建 NSString 对象时，实际上获得的可能是 NSLiteralString、NSCFString、NSSimpleCString、NSBallofString 或者其他未写入文档的与实现相关的对象。通常，你可以将 NSString 或 NSArray 复合到你的某个类中或者使用类别来解决这种编程问题，而不用创建子类。</p>

<h2>8.5 数值类型</h2>

<p>NSArray 和 NSDictionary 只能存储对象，而不能直接存储任何基本类型的数据，如 int、float 或 struct。但你可以用对象来封装基本类型（装箱，boxing），例如，将 int 数据封装在一个对象中，然后就可以存入 NSArray 或 NSDictionary 了。</p>

<h3>8.5.1 NSNumber</h3>

<blockquote><p>通常将一个基本类型的数据封装成对象叫做 <em>装箱（boxing）</em>，从对象中提取基本类型的数据叫做 <em>取消装箱（unboxing）</em>。有些语言有 <em>自动装箱</em> 功能。Objective-C 语言不支持自动装箱。</p></blockquote>

<h3>8.5.2 NSValue</h3>

<p>NSNumber 实际上是 NSValue 的子类，NSValue 可以包装任意值。你可以用 NSValue 将结构放入 NSArray 或 NSDictionary 中。</p>

<p>```objective-c</p>

<p>NSRect rect = NSMakeRect(1, 2, 30, 40);</p>

<p>NSValue *value;
value = [NSValue valueWithBytes: &amp;rect objCType: @encode(NSRect)];</p>

<p>[array addObject: value];</p>

<p>value = [array objectAtIndex: 0];
[value getValue: &amp;rect];</p>

<p>```</p>

<h3>8.5.3 NSNull</h3>

<p>使用NSNull值代表不存在的意义，它可以被加入到集合中。<code>[NSNull null]</code> 总是返回一样的数值，并且可以使用 == 运算符进行比较。</p>

<h1>9 内存管理</h1>

<p>Objective-C 2.0 提供了垃圾回收机制。</p>

<h2>9.1 对象生命周期</h2>

<h3>9.1.1 引用计数（reference counting，也叫保留计数）</h3>

<h3>9.1.2 对象所有权（object ownership）</h3>

<h3>访问方法中的保留和释放</h3>

<p>```objective-c</p>

<ul>
<li>(void) setEnging: (Engine *) newEngine
{
  [newEngine retain];
  [engine release];
  engine = newEngine;
}   // setEngine</li>
</ul>


<p>```</p>

<h2>9.2 自动释放</h2>

<h3>9.2.1 所有对象全部入池</h3>

<p>Cocoa 中有一个 <em>自动释放池（autorelease pool）</em> 的概念</p>

<p>```objective-c</p>

<ul>
<li><p>(NSString <em>) description
{
  NSString </em>description;
  description = [[NSString alloc] initWithFormat: @&ldquo;I am %d years old.&rdquo;, 4];</p>

<p>  return ([description autorelease]);
}   // description</p></li>
</ul>


<p>// 你可以编写如下代码
NSLog(@&ldquo;%@&rdquo;, [someObject description]);</p>

<p>```</p>

<h3>9.2.2 自动释放池的销毁时间</h3>

<p>```objective-c</p>

<p>// 创建池
NSAutoreleasePool *pool;
pool = [[NSAutoreleasePool alloc] init];
// 其他代码</p>

<p>// 释放池
[pool release];</p>

<p>```</p>

<blockquote><p>-drain 方法只是清空自动释放池而不销毁它。-drain 方法适用于Mac OS X 10.4（Tiger）及更高版本。</p></blockquote>

<h3>9.2.3 自动释放池的工作过程</h3>

<p>```objective-c</p>

<p>int main (int argc, const char *argv[])
{</p>

<pre><code>NSAutoreleasePool *pool;
pool = [[NSAutoreleasePool alloc] init];

RetainTracker *tracker;
tracker = [RetainTracker new];   // count: 1

[tracker retain]; // count: 2
[tracker autorelease]; // count: still 2
[tracker release];  // count: 1

NSLog(@"releasing pool");
[pool release];

return (0);
</code></pre>

<p>}   // main</p>

<p>```</p>

<h2>9.3 Cocoa 内存管理规则</h2>

<ul>
<li><p>当你使用 new、alloc 或 copy 方法创建一个对象时，该对象的保留计数器值为1。当不再使用该对象时，你需要负责向该对象发送一条 release 或 autorelease 消息。</p></li>
<li><p>当你通过任何其他方法获得一个对象时，则将设该对象的保留计数器值为1，而且已经被设置为自动释放，你不需要执行任何操作来确保该对象被清理。如果你打算在一段时间内拥有该对象，则需要保留它并确保在操作完成时释放它。</p></li>
<li><p>如果你保留了某个对象，你需要（最终）释放或自动释放该对象。必须保持 retain 方法和 release 方法的使用次数相等。</p></li>
</ul>


<h3>9.3.1 临时对象</h3>

<h3>9.3.2 拥有对象</h3>

<p>通常，你可能希望在多个代码行中一直拥有某个对象。常见方法：在其他对象的实例变量中使用这些对象，将它们加入到诸如 NSArray 或 NSDictionary 等集合中，或者（更罕见的情况）将其作为全局变量使用。</p>

<p>如果你正在使用 new、alloc 或 copy 方法获得一个对象，则不需要执行任何其他操作。该对象的保留计数器值为1，因此它将一直保留，只是一定要在拥有该对象的对象的 dealloc 方法中释放该对象。</p>

<p>```objective-c</p>

<ul>
<li><p>(void) doStuff
{
  // flonkArray is an instance variable
  flonkArray = [NSMutableArray new];    // count: 1
}   // doStuff</p></li>
<li><p>(void) dealloc
{
  [flonkArray release];     // count: 0
  [super dealloc];
}   // dealloc</p></li>
</ul>


<p>```</p>

<p>如果你使用除 alloc、new 或 copy 以外的方法获得一个对象，你需要保留该对象。考虑编写 GUI 应用程序时事件循环的情况。你希望保留自动释放的对象，使这些对象在当前的事件循环结束以后仍能继续存在。</p>

<p>为了降低程序的内存空间占用，Cocoa 在程序开始处理事件之前创建一个自动释放池，并在事件处理结束后销毁该自动释放池，这样可以使积累的临时对象的数量保持在最低程度。</p>

<p>```objective-c</p>

<p>// 当使用自动释放对象时，前面的方法可以重写如下：</p>

<ul>
<li><p>(void) doStuff
{
  // flonkArray is an instance variable
  flonkArray = [NSMutableArray arrayWithCapacity: 17];    // count: 1, autoreleased
  [flonkArray retain];    // count: 2, 1 autorelease
}   // doStuff</p></li>
<li><p>(void) dealloc
{
  [flonkArray release];   // count: 0
  [super dealloc];
}   // dealloc</p></li>
</ul>


<p>```</p>

<p>清理自动释放池</p>

<p>```objective-c</p>

<p>int i;
for (i = 0; i &lt; 1000000; i++) {</p>

<pre><code>id object = [someArray objectAtIndex: i];
NSString *desc = [object description];
// and do something with the description
</code></pre>

<p>}</p>

<p>/<em> 上面这段代码执行一个循环，在大量的迭代中每次都会生成一个（或2个，10个）自动释放对象。请记住，自动释放池的销毁事件是完全确定的，它在循环执行的过程中不会被销毁。这个循环创建了100万个 description 字符串对象，所有这些对象都被放进当前的自动释放池中，因此就产生了100万个闲置的字符串，这100万个字符串对象一直存在，当自动释放池销毁时才最终获得释放。解决这类问题的方法是在循环中创建自己的释放池，每执行1000次左右，销毁当前自动释放池并创建一个新的自动释放池。代码如下 </em>/</p>

<p>NSAutoreleasePool *pool;
pool = [[NSAutoreleasePool alloc] init];
int i;
for (i = 0; i &lt; 1000000; i++) {</p>

<pre><code>id object = [someArray objectAtIndex: i];
NSString *desc = [object description];
// and do something with the description
if (i % 1000 == 0) {
    [pool release];
    pool = [[NSAutoreleasePool alloc] init];
}
</code></pre>

<p>}
[pool release];</p>

<p>/<em> 自动释放池以栈的形式实现：当你创建一个新的自动释放池时，它将被添加到栈顶，接收 autorelease 消息的对象将被放入最顶端的自动释放池中。如果将一个对象放入一个自动释放池中，然后创建一个新的自动释放池再销毁该新建的自动释放池，则这个自动释放对象仍将存在，因为容纳该对象的自动释放池仍然存在。 </em>/</p>

<p>```</p>

<h3>9.3.3 垃圾回收</h3>

<p>Objective-C 2.0 引入了自动内存管理机制</p>

<blockquote><p>&ldquo;-fobjc-gc&rdquo; 选项能使代码既支持垃圾回收机制又支持对象的保留和释放。</p></blockquote>

<p>启用垃圾回收以后，通常的内存管理命令全都变成了空操作指令，不执行任何操作。</p>

<p>Objective-C 的垃圾回收是一种继承性的垃圾回收器。与那些存在了一段时间的对象相比，新创建的对象更可能被当成垃圾。如果在一个实例变量中指向某个对象，一定要在某个时候使该实例变量赋值为 nil，以取消对该对象的引用并使垃圾回收器知道该对象可以被清理。</p>

<h1>10 对象初始化</h1>

<h2>10.1 分配对象</h2>

<p>分配（allocation）对象，从操作系统中获得一块内存并将其指定为存放对象的实例变量的位置。alloc 方法将分配的内存初始化为0。所有的 BOOL 类型变量初始化为 NO，int 类型变量初始化为0，float 类型变量初始化为0.0，指针被初始化为 nil。</p>

<h2>初始化对象</h2>

<p>初始化（initialization）从操作系统获取一块内存，准备用于存储对象。init 方法几乎总是返回他们正在初始化的对象。</p>

<p>```objective-c</p>

<p>Car *car = [[Car alloc] init]; // 不能将分配及初始化分开写，避免初始化方法返回的对象与分配的对象不同</p>

<p>```</p>

<h3>10.2.1 编写初始化方法</h3>

<p>```objective-c</p>

<ul>
<li><p>(id) init
{
  if (self = [super init]) {
      enging = [Engine new];</p>

<pre><code>  tires[0] = [Tire new];
  tires[1] = [Tire new];
  tires[2] = [Tire new];
  tires[3] = [Tire new];
</code></pre>

<p>  }</p>

<p>  return (self);
}   // init</p></li>
</ul>


<p>```</p>

<h3>10.6 指定初始化函数</h3>

<h3>10.7 初始化函数规则</h3>

<ul>
<li><p>不需要为你自己的类创建初始化函数方法。如果不需要设置任何状态，或者只需要 alloc 方法将内存清零的默认行为，则不需要担心init。</p></li>
<li><p>如果构造了一个初始化函数，则一定要在你自己的指定初始化函数中调用超类的指定初始化函数。</p></li>
<li><p>如果初始化函数不止一个，则要选择一个作为指定初始化函数。被选定的方法应该调用超类的指定初始化函数。</p></li>
</ul>


<h1>11 特性</h1>

<p>Objective-C 2.0 中引入了特性（property），它组合了新的预编译指令和新的属性访问器语法。</p>

<h2>11.1 修改特性值</h2>

<h2>11.1.1 简化接口</h2>

<p>```objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<h1>import &ldquo;Tire.h&rdquo;</h1>

<p>@interface AllWeatherRadial : Tire {</p>

<pre><code>float rainHandling;
float snowHandling;
</code></pre>

<p>}</p>

<p>@property float rainHandling;
@property float snowHandling;</p>

<p>@end    // AllWeatherRadial</p>

<p>```</p>

<p>@property 预编译指令自动声明属性的 setter 和 getter方法</p>

<h3>11.1.2 简化实现</h3>

<p>```objective-c</p>

<h1>import &ldquo;AllWeatherRadial.h&rdquo;</h1>

<h1>implementtation AllWeatherRadial</h1>

<p>@synthesize rainHandling;
@synthesize snowHandling;</p>

<ul>
<li><p>(id) initWithPressure: (float) p treadDepth: (float) td
{
  if (self = [super initWithPressure: p treadDepth: td]) {
      rainHandling = 23.7;
      snowHandling = 42.5;
  }</p>

<p>  return (self);
}   // initWithPressure: treadDepth</p></li>
<li><p>(NSString <em>) description
{
  NSString </em>desc;
  desc = [[NSString alloc] initWithFormat: @&ldquo;AllWeatherRadial: %.1f / %.1f / %.1f / %.1f&rdquo;, [self pressure], [self treadDepth], [self rainHandling], [self snowHandling]];</p>

<p>  return (desc);
}   // description</p></li>
</ul>


<p>@end    // AllWeatherRadial</p>

<p>```</p>

<p>@synthesize 表示：创建该属性的访问器</p>

<h3>11.1.3 点表达式</h3>

<p>点表达式出现在等号左边，该属性名称的 setter 方法将被调用，如果点表达式出现在对象变量的右边，则该属性名称的 getter 方法将被调用。</p>

<h2>11.2 特性扩展</h2>

<h3>11.2.1 名称的使用</h3>

<p>```objective-c</p>

<p>@synthesize name = appellcation</p>

<p>```</p>

<h3>11.2.2 只读特性</h3>

<h1>12 类别</h1>

<h2>12.1 创建类别（category）</h2>

<h3>12.1.1 声明类别</h3>

<p>```objective-c</p>

<p>/<em> 类别的声明格式与类的声明格式相似，类别名称必须唯一 </em>/
@interface NSString (NumberConvenience)</p>

<ul>
<li>(NSNumber) lengthAsNumber;</li>
</ul>


<p>@end    // NumberConvenience</p>

<p>```</p>

<p>类别不能添加新的实例变量，因此类别的声明中没有实例变量部分。</p>

<h3>12.1.2 实现类别</h3>

<p>```objective-c</p>

<p>@implementation NSString (NumbreConvenience)</p>

<ul>
<li><p>(NSNumber *) lengthAsNumber
{
  unsigned int length = [self length];</p>

<p>  return ([NSNumber numberWithUnsignedInt: length]);
}   // lengthAsNumber</p></li>
</ul>


<p>@end    // NumberConvenience</p>

<p>```</p>

<h3>12.1.3 类别的局限性</h3>

<ul>
<li><p>无法向类中添加新的实例变量。类别没有位置容纳实例变量。</p></li>
<li><p>名称冲突，即类别中的方法与现有的方法重名。当发生名称冲突时，类别具有更高的优先级，类别方法将取代初始方法，从而无法再使用初始方法。可加特定前缀以避免冲突。</p></li>
</ul>


<blockquote><p>也有一些技术可以克服类别无法增加新实例变量的局限，例如：全局字典存储对象与你想要关联的额外变量之间的映射。但此时需考虑，类别是否完成当前任务的最佳选择。</p></blockquote>

<h3>12.1.4 类别的作用</h3>

<ul>
<li><p>将类的实现分散到多个不同文件或多个不同框架中；</p></li>
<li><p>创建对私有方法的向前引用；</p></li>
<li><p>向对象添加非正式协议（informal protocol）。</p></li>
</ul>


<h2>12.2 利用类别分散实现</h2>

<h2>12.3 使用类别创建向前引用</h2>

<p>如果能够先定义一个方法，然后再使用它，编译器将会找到你的方法定义，因而不产生警告。如果不方便这么做，或者你使用了另一个类尚未发布的方法，那么就需要采取其他措施。</p>

<p>通过在类别中声明该方法，编译器将不会产生警告。</p>

<h2>12.4 非正式协议和委托类别</h2>

<p>委托强调类别的一种应用：被发送给委托对象的方法可以声明为一个 NSObject 的类别。</p>

<blockquote><p>像这样创建 NSObject 的类别，任何类的对象都可以作为委托对象使用。</p></blockquote>

<p>非正式协议是 NSObject 的一个类别，它可以列出对象能够响应的方法。非正式协议用于实现委托。</p>

<p>选择器：@selector，可以在代码中指定特定的 Objective-C 消息。</p>

<h1>13 协议</h1>

<h2>13.1 正式协议</h2>

<p>与非正式协议一样，正式协议也是一个命名的方法列表。但与非正式协议不同的是，正式协议要求显式的采用协议。采用协议的方法是在类的 @interface 声明中列出协议的名称。此时，你的类遵守该协议，并应该实现该协议的所有方法，否则，编译器会生成警告。Objective-C 2.0增加了一些良好的特性，以便更好使用协议。</p>

<blockquote><p>正式协议类似 Java 接口</p></blockquote>

<h3>13.1.1 声明协议</h3>

<p>```objective-c</p>

<p>// 声明正式协议
@protocol NSCopying</p>

<ul>
<li>(id) copyWithZone: (NSZone *) zone;</li>
</ul>


<p>@end</p>

<p>```</p>

<ul>
<li><p>@protocol 告诉编译器，这是一个正式协议。</p></li>
<li><p>协议名称必须唯一。</p></li>
<li><p>方法声明列表中的方法，在协议的每个采用者中都必须被实现。</p></li>
<li><p>使用协议不可引入新的实例变量。</p></li>
</ul>


<h3>13.1.2 采用协议</h3>

<p>要采用某个协议，必须在类声明中列出该协议的名称，并用尖括号括起。若存在多个协议，逗号隔开（顺序无关）。</p>

<p>```objective-c</p>

<p>// Car 采用协议 NSCopying 及 NSCoding
@interface Car : NSObject &lt;NSCopying, NSCoding>
{</p>

<pre><code>// instance variables
</code></pre>

<p>}</p>

<p>// methods</p>

<p>@end    // Car</p>

<p>```</p>

<h3>13.1.3 实现协议</h3>

<h2>13.2 复制</h2>

<blockquote><p>浅层复制（Shallow Copy）、深层复制（Deep Copy）</p></blockquote>

<p>```objective-c</p>

<p>// 深层复制
&ndash; (id) copyWithZone: (NSZone *) zone
{</p>

<pre><code>Tire * tireCopy;
tireCopy = [[[self class] allocWithZone: zone] initWithPressure: pressure treadDepth: treadDepth];

return (tireCopy);
</code></pre>

<p>}   // copyWithZone</p>

<p>```</p>

<blockquote><p>C 风格指针运算符直接访问实例变量<code>tireCopy -&gt; pressure = pressure; tireCopy -&gt; treadDepth = treadDepth;</code>。一般，设置属性不涉及额外工作时，尽量使用init方法和访问器方法。</p></blockquote>

<h2>13.3 Objective-C 2.0 新特性</h2>

<ul>
<li><p>新增协议修饰符：@optional（方法可选实现）、@required（方法必须实现，默认属性）。</p></li>
<li><p>非正式协议在 Objective-C 2.0 之后，主键被带有 @optional 方法的正式协议代替。</p></li>
</ul>


<h1>14 AppKit 简介</h1>

<h2>14.1 构建项目</h2>

<blockquote><p>拖动连接的路径是从需要知道某些内容的对象到该对象需要了解的对象。类似 AppController 需要知道将哪个 NSTextField 用于用户输入，因此拖动方向从 AppController 到文本域。按钮需要知道告诉哪个对象，按钮被 click 了，此时需要从按钮拖到AppController。</p></blockquote>

<h1>15 文件加载与保存</h1>

<p>标准 C 函数库提供了函数调用来创建、读取和写入文件，例如 open()、read()、write()、fopen() 和 fread()等。Cocoa 提供了 Core Data。另外 Cocoa 提供了两个通用的文件处理类：属性列表和对象编码。</p>

<h1>15.1 属性列表</h1>

<p>属性列表对象，常简写为 plist。属性列表类包括 NSArray、NSDictionary、NSString、NSNumber、NSDate、NSData，以及他们的变体（如果变体存在）。</p>

<h3>15.1.1 NSDate</h3>

<h3>15.1.2 NSData</h3>

<p>```objective-c</p>

<p>// NSData 对象保存一个普通的 C 字符串（一个字节序列），然后输出数据
const char <em>string = &ldquo;Hi there, this is a C string!&rdquo;;
// length: strlen(string) + 1 用于包含 C 字符串所需的尾部的零字节。
NSData </em>data = [NSData dataWithBytes: string length: strlen(string) + 1];
NSLog(@&ldquo;data is %@&rdquo;, data);</p>

<p>//输出结果：<code>data is &lt;48692074 68657265 2c207468 69732069 73206120 43207374 72696e67 2100&gt;</code>
// 包含末尾00的零字节数据，可以使用 %s 格式输出字符串
NSLog(@&ldquo;%d byte string is &lsquo;%s&rsquo;&rdquo;, [data length], [data bytes]);</p>

<p>//输出结果：<code>30 byte string is 'Hi there, this is a C string!'</code>
```</p>

<p>NSMutableData</p>

<h3>15.1.3 写入和读取属性列表</h3>

<blockquote><p>在操作系统中，有许多属性列表文件和系统配置文件，如主目录 Library/Preference 下的所有首选项文件和 /System/Library/LaunchDaemons 下的系统配置文件。有些属性列表文件（特别是首选项文件）是以二进制格式存储的。通过使用 plutil 命令：plutil -convert xml1 filename.plist，可以将这些文件转换成可读形式。</p></blockquote>

<h2>15.2 编码对象</h2>

<p>采用 NSCoding 协议和实现方法来编码和解码对象：将大量对象转换成 NSData 类，保存到磁盘中，并在以后读取它，通过 NSData 类，重新创建对象。</p>

<h1>16 键/值编码</h1>

<p>键/值编码（KVC）是一种间接更改对象状态的方式，其实现方法是使用字符串描述要更改的对象状态部分。Cocoa 的一些特性，如 Core Data 或 Cocoa Bindings 在基础机制中包含了 KVC。</p>

<h2>16.1 入门项目</h2>

<h2>16.2 KVC 简介</h2>

<p>键/值编码中的基本调用包括 -valueForKey: 和 -setValue:forKey:。</p>

<p>```objective-c</p>

<p>[car setValue: @&ldquo;Haroid&rdquo; forKey: @&ldquo;name&rdquo;];
NSString *name = [car valueForKey: @&ldquo;name&rdquo;];
NSLog(@&ldquo;%@&rdquo;, name);</p>

<p>```</p>

<p>-valueForKey: 首先查找以键 -key 或 -isKey 命名的 getter 方法，对于这类调用 valueForKey: 查找 -name。如果不存在 getter 方法，它将在对象内部查找名为 <em>key 或 key 的实例变量，如果没有通过 @synthesize 提供存取方法，valueForKey 将会查找实例变量 </em>name 和 name。</p>

<ul>
<li><p>-valueForKey 在 Objective-C 运行时使用元数据打开对象并进入其中查找需要的信息，在 C 或 C++ 中不能执行这种操作。通过 KVC ，可以获取不存在 getter 方法的对象值，无需通过对象指针直接访问实例变量。</p></li>
<li><p>对于 KVC，Cocoa 自动放入和取出标量值。仅 KVC 具有这种自动包装功能。</p></li>
</ul>


<p>-setValue:forKey: 工作方法同 -valueForKey: 类似，首先查找名称的 setter 方法，如果不存在 setter 方法，它将再类中查找 key 或 _key 的实例变量，然后为其赋值。</p>

<blockquote><p>编译器和苹果公司都以下划线开头的形式保存实例变量名称，如果你尝试在其他地方使用下划线，可能会出现严重的错误。这条规则实际上不是强制的，但如果不遵守它，可能会遇到某些风险。</p></blockquote>

<h2>16.3 路径</h2>

<p>除了通过键设置值外，键/值编码还支持指定键路径，你可以遵循一定关系来指定该路径。路径可以指定以圆点分隔不同属性名称。例如：“engine.horsepower”。</p>

<h2>16.4 整体操作</h2>

<p>关于 KVC 非常棒的一点是，如果向 NSArray 请求一个键值，它实际上会查询数组中的每个对象来查找这个键值，然后将查询结果打包到另一个数组中并返回给你。这种方法也适用于通过键路径访问的对象内部的数组。</p>

<p>在 KVC 中，通常认为嵌入到其他对象中的 NSArray 具有一对多的关系。</p>

<p>```objective-c</p>

<p>NSArray *pressures = [car valueForKeyPath: @&ldquo;tires.pressure&rdquo;];</p>

<p>// 不能在键路径中为这些数组添加索引，例如，“tires[0].pressure” 是错误的。</p>

<p>```</p>

<p>键路径不仅能引用对象值，还可以引用一些运算符来进行一些计算，例如获取一组值的平均值或返回这组值中的最小值和最大值。</p>

<p>```objective-c</p>

<p>NSNumber *count;
// 计算汽车的数量，键路径 “cars.@count” 拆开，cars用于获取cars属性，它是 garage 的 NSArray 类型的值。@count 用于通知 KVC 机制计算键路径左侧的结果。
count = [garage valueForKeyPath: @&ldquo;cars.@count&rdquo;];</p>

<p>NSNumber *sum;
// 计算某些特定值的总和，例如，车队行驶的总英里数
sum = [garage valueForKeyPath: @&ldquo;<a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x63;&#x61;&#x72;&#115;&#x2e;&#x40;&#115;&#x75;&#109;&#x2e;&#x6d;&#105;&#x6c;&#x65;&#97;&#x67;&#101;">&#x63;&#x61;&#114;&#115;&#x2e;&#64;&#x73;&#117;&#109;&#46;&#x6d;&#105;&#x6c;&#101;&#x61;&#103;&#x65;</a>&rdquo;];</p>

<p>NSNumber *avgMileage;
// 计算平均每辆汽车行驶的距离
avgMileage = [garage valueForKeyPath: @&ldquo;<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x63;&#x61;&#114;&#x73;&#46;&#x40;&#x61;&#x76;&#x67;&#x2e;&#x6d;&#105;&#x6c;&#x65;&#97;&#103;&#x65;">&#99;&#97;&#114;&#115;&#x2e;&#x40;&#x61;&#x76;&#103;&#46;&#109;&#x69;&#x6c;&#x65;&#97;&#x67;&#101;</a>&rdquo;];</p>

<p>// @min、@max
NSNumber <em>min, </em>max;
min = [garage valueForKeyPath: @&ldquo;<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#58;&#99;&#x61;&#x72;&#x73;&#x2e;&#x40;&#109;&#x69;&#x6e;&#46;&#x6d;&#x69;&#x6c;&#x65;&#97;&#103;&#x65;">&#99;&#x61;&#x72;&#115;&#x2e;&#64;&#109;&#x69;&#x6e;&#x2e;&#x6d;&#x69;&#108;&#x65;&#x61;&#x67;&#x65;</a>&rdquo;];
max = [garage valueForKeyPath: @&ldquo;<a href="&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x63;&#x61;&#114;&#115;&#x2e;&#64;&#109;&#x61;&#x78;&#x2e;&#x6d;&#x69;&#x6c;&#x65;&#97;&#103;&#x65;">&#x63;&#x61;&#x72;&#x73;&#x2e;&#64;&#109;&#x61;&#120;&#46;&#109;&#105;&#108;&#x65;&#97;&#x67;&#x65;</a>&rdquo;];</p>

<p>```</p>

<blockquote><p>KVC 能非常轻松的处理集合。但是 KVC 需要通过解析字符串来计算你所需要的答案，因此速度比较慢；编译器无法对它进行错误检查，当你使用错误的键路径时，会出现运行时错误。</p></blockquote>

<h2>16.6 nil值处理</h2>

<h2>16.7 处理未定义的键</h2>

<p>如果 KVC 机制无法找到键路径的处理方式，默认实现会取消操作。但我们可以通过更改默认行为来处理这种情况。valueForUndefinedKey: 方法或 setValue:forUndefinedKey: 方法。</p>

<p>```objective-c</p>

<p>@interface Garage : NSObject {</p>

<pre><code>NSString *name;
NSMutableArray *cars;
NSMutableDictionary *stuff;
</code></pre>

<p>}
// &hellip; 其他代码
@end    // Garage</p>

<p>// 在实现中添加 valueForUndefinedKey: 及 setValue:forUndefinedKey: 方法
&ndash; (void) setValue: (id) value forUndefinedKey: (NSString *) key {</p>

<pre><code>if (stuff == nil) {
    stuff = [[NSMutableDictionary alloc] init];
}
[stuff setValue: value forKey: key];
</code></pre>

<p>}   // setValueForUndefinedKey</p>

<ul>
<li>(id) valueForUndefinedKey: (NSString *) key {
  id value = [stuff valueForKey: key];
  return (value);
}   // valueForUndefinedKey</li>
</ul>


<p>```</p>

<h1>17 NSPredicate</h1>

<p>Cocoa 用 NSPredicate 类描述查询方式</p>

<h2>17.1 创建谓词</h2>

<p>```objective-c</p>

<p>// 创建谓词，
NSPredicate *predicate;
predicate = [NSPredicate predicateWithFormat: @&ldquo;name == &lsquo;Herbie&rsquo;&rdquo;];</p>

<p>// 计算谓词
BOOL match = [predicate evaluateWithObject: car];
NSLog(@&ldquo;%s&rdquo;, (match) ? &ldquo;YES&rdquo; : &ldquo;NO&rdquo;);</p>

<p>```</p>

<h2>17.2 燃料过滤器</h2>

<p>```objective-c</p>

<p>NSArray *results;
// 返回符合条件的car
results = [cars filteredArrayUsingPredicate: predicate];
NSLog(@&ldquo;%@&rdquo;, results);</p>

<p>```</p>

<p>使用谓词确实很便捷，但它的运行速度不会比你自己编写全部代码快。因为它无法避免在所有汽车之间使用循环和对每辆汽车进行某些操作。一般来说，这种循环不会带来很大的性能影响，因为当今的计算机运行速度非常快。可以继续编写尽可能简易的代码。如果你遇到速度问题，可以使用苹果公司的工具（如 Shark 或 Instruments）测试程序性能。</p>

<h2>17.3 格式说明符</h2>

<p>可以在谓词中使用格式说明符 %d、%f、%@（指定值）或 %K（指定键路径）。或者直接将变量名放入字符串 $NAME 来指定值。</p>

<h2>17.4 运算符</h2>

<h3>17.4.1 比较和逻辑运算符</h3>

<p>谓词字符串语法支持 C 语言中的一些常用运算符。例如： ==、=、>、>= 或 =>、&lt;、&lt;= 或 =&lt;、!= 或 &lt;>、括号表达式、AND、OR、NOT 逻辑运算符或C样式的等效表达式 &amp;&amp;、|| 和 !。</p>

<p>谓词字符串中运算符不区分大小写。</p>

<h3>17.4.2 数组运算符</h3>

<p>```objective-c</p>

<p>predicate = [NSPredicate predicateWithFormat: @&ldquo;engine.horsepower BETWEEN {50, 200}&rdquo;];</p>

<p>predicate = [NSPredicate predicateWithFormat: @&ldquo;name IN {&lsquo;Herbie&rsquo;, &lsquo;Snugs&rsquo;, &lsquo;Badger&rsquo;, &lsquo;Flap&rsquo;}&rdquo;];</p>

<p>```</p>

<h2>17.5 SELF</h2>

<p>SELF 可以引用用于谓词计算的对象</p>

<p>```objective-c</p>

<p>predicate = [NSPredicate predicateWithFormat: @&ldquo;SELF.name IN {&lsquo;Herbie&rsquo;, &lsquo;Snugs&rsquo;, &lsquo;Badger&rsquo;, &lsquo;Flap&rsquo;}&rdquo;];</p>

<p>```</p>

<h2>17.6 字符串运算符</h2>

<p>BEGINSWITH：某个字符串是否以另外一个字符串开头；ENDSWITH：某个字符串是否以另外一个字符串结尾；CONTAINS：某个字符串是否在另一个字符串内部。</p>

<p>以上运算符可增加 [c] 不区分大小写、[d] 不区分发音符号、[cd] 既不区分大小写又不区分发音符号 等修饰符</p>

<h2>17.7 LIKE 运算符</h2>

<h2>17.8 MATCHES 正则运算符</h2>

<h2>相关术语</h2>

<ul>
<li><p><em>类</em> 是一种结构，它表示对象的类型。对象引用类来获取和自身相关的各种信息。Objective-C 编程风格建议开发人员使用首字母大写的类名。</p></li>
<li><p><em>对象</em> 是一种结构，它包含值和指向其类的隐藏指针。引用对象的 Objective-C 变量通常不需要首字母大写。</p></li>
<li><p><em>消息</em> 是对象可以执行的操作，用于通知对象去做什么。在 [shape draw] 代码中，通过向 shape 对象发送 draw 消息来通知对象绘制自身。对象接收消息后，将查询对应的类，以便查找正确的代码来运行。</p></li>
<li><p><em>方法</em> 是为响应消息而运行的代码。根据对象的类，消息（例如 draw）可以调用不同的方法。</p></li>
<li><p><em>方法调度程序</em> 是 Objective-C 使用的一种机制，用于推测执行什么方法以响应某个特定得消息。</p></li>
<li><p><em>接口</em> 是对象的类应该提供的特性的描述。接口不提供具体的实现细节。</p></li>
<li><p><em>实现</em> 是使接口正常工作的代码。</p></li>
<li><p><em>实例化（instantiation）</em> 根据类信息进行内存分配和初始化，创建一个新的对象实例。</p></li>
<li><p><em>继承</em> 定义一个具有父类所有功能的新类，它继承了父类的这些功能。</p></li>
<li><p><em>复合</em> 在复合中，对象可以引用其他对象。例如汽车对象可以引用轮胎对象。</p></li>
<li><p><em>重构</em>。</p></li>
<li><p><em>超类（superclass）</em>、<em>父类（parentclass）</em>、<em>子类（subclass）</em>、<em>子类（childclass）</em>。</p></li>
<li><p><em>委托（delegate）</em> 是一种对象，另一个类的对象会要求委托对象执行它的某些操作。</p></li>
<li><p><em>非正式协议</em>。</p></li>
<li><p><em>正式协议（formal protocol）</em>。</p></li>
<li><p><em>.xib 文件</em> .xib 文件是 XML 格式的 nib 文件。在编译时，.xib文件将编译为nib格式。</p></li>
<li><p><em>编码（序列化）</em>、<em>解码（反序列化）</em>。</p></li>
</ul>


<blockquote><ul>
<li>书名《Learn Objective-C on the Mac》Objective-C 基础教程</li>
<li>高朝勤 杨越 刘霞 等译，人民邮电出版社</li>
<li><p>2009年8月第一版</p></li>
<li><p><strong>这本书写得或者是翻译得很差。</strong></p></li>
</ul>
</blockquote>
]]></content>
  </entry>
  
</feed>
