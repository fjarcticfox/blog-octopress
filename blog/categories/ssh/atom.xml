<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ssh | 逆水行舟]]></title>
  <link href="http://blog.longgen.me/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://blog.longgen.me/"/>
  <updated>2014-08-14T11:20:04+08:00</updated>
  <id>http://blog.longgen.me/</id>
  <author>
    <name><![CDATA[Longgen]]></name>
    <email><![CDATA[fjarcticfox@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【转】SSH 原理与运用]]></title>
    <link href="http://blog.longgen.me/blog/2014/07/04/%5B%28zhuan-%29%5D-ssh-yuan-li-yu-yun-yong/"/>
    <updated>2014-07-04T14:16:19+08:00</updated>
    <id>http://blog.longgen.me/blog/2014/07/04/[(zhuan-)]-ssh-yuan-li-yu-yun-yong</id>
    <content type="html"><![CDATA[<p>SSH 是每一台 Linux 电脑的标准配置。随着 Linux 设备从电脑逐渐扩展到手机、外设和家用电器，SSH 的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。</p>

<p>SSH 具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔记，总结和解释了 SSH 的常见用法，希望对大家有用。</p>

<!-- more -->


<h2>什么是SSH</h2>

<p>简单说，SSH 是一种网络协议，用于计算机之间的加密登录。
如果一个用户从本地计算机，使用 SSH 协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p>

<p>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995 年，芬兰学者 Tatu Ylonen 设计了 SSH 协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为 Linux 系统的标准配置。</p>

<p>需要指出的是，SSH 只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是 OpenSSH，它是自由软件，应用非常广泛。</p>

<p>此外，本文只讨论 SSH 在 Linux Shell 中的用法。如果要在 Windows 系统中使用 SSH，会用到另一种软件 PuTTY，这需要另文介绍。</p>

<h2>最基本的用法</h2>

<p>SSH 主要用于远程登录。假定你要以用户名 user，登录远程主机 host，只要一条简单命令就可以了。</p>

<p>```sh</p>

<p>$ ssh user@host</p>

<p>```</p>

<p>如果本地用户名与远程用户名一致，登录时可以省略用户名。</p>

<p>```sh</p>

<p>$ ssh host</p>

<p>```</p>

<p>SSH 的默认端口是 22，也就是说，你的登录请求会送进远程主机的 22 端口。使用 p 参数，可以修改这个端口。</p>

<p>```sh</p>

<p>$ ssh -p 2222 user@host</p>

<p>```</p>

<p>上面这条命令表示，ssh 直接连接远程主机的 2222 端口。</p>

<h2>中间人攻击</h2>

<p>SSH 之所以能够保证安全，原因在于它采用了公钥加密。整个过程是这样的：</p>

<p>```</p>

<p>1）远程主机收到用户的登录请求，把自己的公钥发给用户。
2）用户使用这个公钥，将登录密码加密后，发送回来。
3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>

<p>```</p>

<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像 https 协议，SSH 协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。
可以设想，如果攻击者插在用户与远程主机之间（比如在公共的 wifi 区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么 SSH 的安全机制就荡然无存了。这种风险就是著名的“中间人攻击”（ Man-in-the-middle attack）。
SSH 协议是如何应对的呢？</p>

<h2>口令登陆</h2>

<p>如果你是第一次登录对方主机，系统会出现下面的提示：</p>

<p>```sh</p>

<p>$ ssh user@host
The authenticity of host ‘host (12.18.429.21)’ can’t be established.
RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.
Are you sure you want to continue connecting (yes/no)?</p>

<p>```</p>

<p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p>

<p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。</p>

<p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p>

<p>```sh</p>

<h1>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</h1>

<p>Are you sure you want to continue connecting (yes/no)? yes</p>

<h1>系统会出现一句提示，表示host主机已经得到认可。</h1>

<p>Warning: Permanently added ‘host,12.18.429.21′ (RSA) to the list of known hosts.</p>

<h1>然后，会要求输入密码。</h1>

<p>Password: (enter password)</p>

<p>```</p>

<p>如果密码正确，就可以登录了。</p>

<p>当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>

<p>每个 SSH 用户都有自己的 known_hosts 文件，此外系统也有一个这样的文件，通常是<code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p>

<h2>公钥登录</h2>

<p>使用密码登录，每次都必须输入密码，非常麻烦。好在 SSH 还提供了公钥登录，可以省去输入密码的步骤。
所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录 shell，不再要求密码。</p>

<p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p>

<p>```sh</p>

<p>$ ssh-keygen</p>

<p>```</p>

<p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p>

<p>运行结束以后，在<code>$HOME/.ssh/</code>目录下，会新生成两个文件：<code>id_rsa.pub</code>和<code>id_rsa</code>。前者是你的公钥，后者是你的私钥。</p>

<p>这时再输入下面的命令，将公钥传送到远程主机 host 上面：</p>

<p>```sh</p>

<p>$ ssh-copy-id user@host</p>

<p>```</p>

<p>好了，从此你再登录，就不需要输入密码了。</p>

<p>如果还是不行，就打开远程主机的<code>/etc/ssh/sshd_config</code>这个文件，检查下面几行前面”#”注释是否取掉。</p>

<p>```sh</p>

<p>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys</p>

<p>```</p>

<p>然后，重启远程主机的 ssh 服务。</p>

<p>```sh</p>

<p>// ubuntu系统
service ssh restart</p>

<p>// debian系统
/etc/init.d/ssh restart</p>

<p>```</p>

<h2>authorized_keys 文件</h2>

<p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code>文件中。公钥就是一段字符串，只要把它追加在<code>authorized_keys</code>文件的末尾就行了。
这里不使用上面的 ssh-copy-id 命令，改用下面的命令，解释公钥的保存过程：</p>

<p>```sh</p>

<p>$ ssh user@host &lsquo;mkdir -p .ssh &amp;&amp; cat >> .ssh/authorized_keys&rsquo; &lt; ~/.ssh/id_rsa.pub</p>

<p>```</p>

<p>这条命令由多个语句组成，依次分解开来看：（1）”$ ssh user@host”，表示登录远程主机；（2）单引号中的 mkdir .ssh &amp;&amp; cat >> .ssh/authorized_keys，表示登录后在远程 shell 上执行的命令：（3）”$ mkdir -p .ssh”的作用是，如果用户主目录中的 .ssh 目录不存在，就创建一个；（4）’cat >> .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub 的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件<code>authorized_keys</code>的末尾。写入<code>authorized_keys</code>文件后，公钥登录的设置就完成了。</p>

<h2>远程操作</h2>

<p>SSH 不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p>

<p>```sh</p>

<p>$ ssh user@host &lsquo;mkdir -p .ssh &amp;&amp; cat >> .ssh/authorized_keys&rsquo; &lt; ~/.ssh/id_rsa.pub</p>

<h1>单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过 SSH 传向远程主机。</h1>

<p>这就是说，SSH 可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过 SSH 来完成。
下面看几个例子。</p>

<h1>将<code>$HOME/src/</code>目录下面的所有文件，复制到远程主机的<code>$HOME/src/</code>目录。</h1>

<p>$ cd &amp;&amp; tar czv src | ssh user@host &lsquo;tar xz&rsquo;</p>

<h1>将远程主机<code>$HOME/src/</code>目录下面的所有文件，复制到用户的当前目录。</h1>

<p>$ ssh user@host &lsquo;tar cz src&rsquo; | tar xzv</p>

<h1>查看远程主机是否运行进程 httpd。</h1>

<p>$ ssh user@host &lsquo;ps ax | grep [h]ttpd&rsquo;</p>

<p>```</p>

<h2>绑定本地端口</h2>

<p>既然 SSH 可以传送数据，那么我们可以让那些不加密的网络连接，全部改走 SSH 连接，从而提高安全性。
假定我们要让 8080 端口的数据，都通过 SSH 传向远程主机，命令就这样写：</p>

<p>```sh</p>

<p>$ ssh -D 8080 user@host</p>

<p>```</p>

<p>SSH 会建立一个 socket，去监听本地的 8080 端口。一旦有数据传向那个端口，就自动把它转移到 SSH 连接上面，发往远程主机。可以想象，如果 8080 端口原来是一个不加密端口，现在将变成一个加密端口。</p>

<h2>本地端口转发</h2>

<p>有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的”端口转发”。为了区别后文的”远程端口转发”，我们把这种情况称为”本地端口转发”（Local forwarding）。</p>

<p>假定 host1 是本地主机，host2 是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台 host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过 host3，将 host1 连上 host2。
我们在 host1 执行下面的命令：</p>

<p>```sh</p>

<p>$ ssh -L 2121:host2:21 host3</p>

<p>```</p>

<p>命令中的 L 参数一共接受三个值，分别是”本地端口:目标主机:目标主机端口”，它们之间用冒号分隔。这条命令的意思，就是指定 SSH 绑定本地端口 2121，然后指定 host3 将所有的数据，转发到目标主机 host2 的 21 端口（假定 host2 运行 FTP，默认端口为 21）。</p>

<p>这样一来，我们只要连接 host1 的 2121 端口，就等于连上了 host2 的 21 端口。</p>

<p>```sh</p>

<p>$ ftp localhost:2121</p>

<p>```</p>

<p>“本地端口转发”使得 host1 和 host3 之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH隧道”。</p>

<h2>远程端口转发</h2>

<p>既然”本地端口转发”是指绑定本地端口的转发，那么”远程端口转发”（remote forwarding）当然是指绑定远程端口的转发。</p>

<p>还是接着看上面那个例子，host1 与 host2 之间无法连通，必须借助 host3 转发。但是，特殊情况出现了，host3 是一台内网机器，它可以连接外网的 host1，但是反过来就不行，外网的 host1 连不上内网的 host3。这时，”本地端口转发”就不能用了，怎么办？</p>

<p>解决办法是，既然 host3 可以连 host1，那么就从 host3 上建立与 host1 的 SSH 连接，然后在 host1 上使用这条连接就可以了。</p>

<p>我们在 host3 执行下面的命令：</p>

<p>```sh</p>

<p>$ ssh -R 2121:host2:21 host1</p>

<p>```</p>

<p>R 参数也是接受三个值，分别是”远程主机端口:目标主机:目标主机端口”。这条命令的意思，就是让 host1 监听它自己的 2121 端口，然后将所有数据经由 host3，转发到 host2 的 21 端口。由于对于 host3 来说，host1 是远程主机，所以这种情况就被称为”远程端口绑定”。</p>

<p>绑定之后，我们在 host1 就可以连接 host2 了：</p>

<p>```sh</p>

<p>$ ftp localhost:2121</p>

<p>```</p>

<p>这里必须指出，”远程端口转发”的前提条件是，host1 和 host3 两台主机都有 sshD 和 ssh 客户端。</p>

<h2>SSH 的其他参数</h2>

<p>SSH 还有一些别的参数，也值得介绍。</p>

<p>N 参数，表示只连接远程主机，不打开远程 shell；T 参数，表示不为这个连接分配 TTY。这个两个参数可以放在一起用，代表这个 SSH 连接只用来传数据，不执行远程操作。</p>

<p>```sh</p>

<p>$ ssh -NT -D 8080 host</p>

<p>```</p>

<p>f 参数，表示 SSH 连接成功后，转入后台运行。这样一来，你就可以在不中断 SSH 连接的情况下，在本地 shell 中执行其他操作。</p>

<p>```sh</p>

<p>$ ssh -f -D 8080 host</p>

<p>```</p>

<p>要关闭这个后台连接，就只有用 kill 命令去杀掉进程。</p>

<h2>参考资料</h2>

<ol>
<li><a href="http://blog.aliyun.com/1251?spm=0.0.0.0.owssBR">SSH 原理与运用（一）：远程登录</a></li>
<li><a href="http://blog.aliyun.com/1257?spm=0.0.0.0.owssBR">SSH 原理与运用（二）：远程操作与端口转发</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu SSH 服务开启]]></title>
    <link href="http://blog.longgen.me/blog/2014/06/27/ubuntu-ssh-fu-wu-kai-qi/"/>
    <updated>2014-06-27T12:31:02+08:00</updated>
    <id>http://blog.longgen.me/blog/2014/06/27/ubuntu-ssh-fu-wu-kai-qi</id>
    <content type="html"><![CDATA[<h2>开启 SSH 服务</h2>

<ul>
<li>openssh-client，客户端，用于登陆其他服务器，ubuntu 默认已经安装，如果未安装则执行以下命令：</li>
</ul>


<p>```sh</p>

<p>sudo apt-get install openssh-client</p>

<p>```</p>

<ul>
<li>openssh-server，服务端，本机对外开放 SSH 服务</li>
</ul>


<p>```sh</p>

<h1>安装 openssh-server</h1>

<p>sudo apt-get install openssh-server</p>

<h1>确认 ssh server 是否启动，sshd 表示 ssh server 启动成功</h1>

<p>ps -e | grep ssh</p>

<h1>启动 ssh server 服务，ssh server 的配置文件位于 <code>/etc/ssh/sshd_config</code>，在这里可以定义 SSH 的服务端口，默认为22</h1>

<p>sudo /etc/init.d/ssh start</p>

<h1>或</h1>

<p>service ssh start</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
